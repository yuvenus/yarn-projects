{"version":3,"sources":["Grid/GridItem/GridItem.js","projects.js","Grid/Grid.js","Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["gridItem","props","className","src","imageUrl","alt","projects","Grid","map","m","Component","Header","state","expanded","sort","changeExpanded","setState","this","onClick","icon","faInfoCircle","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+VASeA,G,YANE,SAACC,GAChB,OAAQ,yBAAKC,UAAU,aACnB,yBAAKC,IAAKF,EAAMG,SAAUC,IAAKJ,EAAMI,SC4B5BC,EAjCE,CACb,CAAEF,SAAU,iCACVC,IAAK,QACP,CAAED,SAAU,oCACVC,IAAK,WACP,CAAED,SAAU,8CACVC,IAAK,qBACP,CAAED,SAAU,iCACVC,IAAK,QACP,CAAED,SAAU,uCACVC,IAAK,aACP,CAAED,SAAU,mCACVC,IAAK,UACP,CAAED,SAAU,kCACVC,IAAK,SACP,CAAED,SAAU,qCACVC,IAAK,YACP,CAAED,SAAU,oCACVC,IAAK,WACP,CAAED,SAAU,qCACVC,IAAK,YACP,CAAED,SAAU,uCACVC,IAAK,cACP,CAAED,SAAU,iCACVC,IAAK,QACP,CAAED,SAAU,kCACVC,IAAK,SACP,CAAED,SAAU,qCACVC,IAAK,YACP,CAAED,SAAU,uCACVC,IAAK,eCjBIE,E,iLANX,OAAO,yBAAKL,UAAU,QACnBI,EAASE,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAUL,SAAUK,EAAEL,SAAUC,IAAKI,EAAEJ,c,GAH7CK,a,uBC8BJC,E,2MA5BXC,MAAQ,CACJC,UAAU,EACVC,MAAM,G,EAGVC,eAAiB,kBAAM,EAAKC,SAAS,CAACH,UAAW,EAAKD,MAAMC,Y,wEAIxD,OAAO,yBAAKX,UAAWe,KAAKL,MAAMC,SAAW,kBAAoB,UAC7D,yBAAKX,UAAU,gBACX,0BAAMA,UAAU,cAAcgB,QAASD,KAAKF,gBACxC,kBAAC,IAAD,CAAiBb,UAAU,OAAOiB,KAAMC,QAO/CH,KAAKL,MAAMC,UACR,qT,GArBKH,aCQNW,MATf,WACE,OACE,yBAAKnB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGcoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0f53c353.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./GridItem.css\"\r\n\r\nconst gridItem = (props) => {\r\n  return (<div className=\"grid-item\">\r\n      <img src={props.imageUrl} alt={props.alt}></img>\r\n    </div>);\r\n};\r\n\r\nexport default gridItem;\r\n","const projects = [\r\n    { imageUrl: '/yarn-projects/images/bear.jpg',\r\n      alt: 'bear' },\r\n    { imageUrl: '/yarn-projects/images/dolphin.jpg',\r\n      alt: 'dolphin' },\r\n    { imageUrl: '/yarn-projects/images/halloween_bigfoot.jpg',\r\n      alt: 'halloween bigfoot' },\r\n    { imageUrl: '/yarn-projects/images/lion.jpg',\r\n      alt: 'lion' },\r\n    { imageUrl: '/yarn-projects/images/manta_ray.jpeg',\r\n      alt: 'manta ray' },\r\n    { imageUrl: '/yarn-projects/images/monkey.jpg',\r\n      alt: 'monkey' },\r\n    { imageUrl: '/yarn-projects/images/otter.jpg',\r\n      alt: 'otter' },\r\n    { imageUrl: '/yarn-projects/images/pangolin.jpg',\r\n      alt: 'pangolin' },\r\n    { imageUrl: '/yarn-projects/images/peacock.jpg',\r\n      alt: 'peacock' },\r\n    { imageUrl: '/yarn-projects/images/platypus.jpg',\r\n      alt: 'platypus' },\r\n    { imageUrl: '/yarn-projects/images/polar_bear.jpg',\r\n      alt: 'polar bear' },  \r\n    { imageUrl: '/yarn-projects/images/seal.jpg',\r\n      alt: 'seal' },\r\n    { imageUrl: '/yarn-projects/images/squid.jpg',\r\n      alt: 'squid' },\r\n    { imageUrl: '/yarn-projects/images/starfish.jpg',\r\n      alt: 'starfish' },\r\n    { imageUrl: '/yarn-projects/images/tuxedo_sam.jpg',\r\n      alt: 'tuxedo sam' },\r\n] \r\n\r\nexport default projects;","import React, { Component } from \"react\";\r\nimport \"./Grid.css\";\r\nimport GridItem from \"./GridItem/GridItem\";\r\nimport projects from \"../projects\"\r\n\r\nclass Grid extends Component {\r\n  render() {\r\n    return <div className=\"grid\">\r\n      {projects.map(m => <GridItem imageUrl={m.imageUrl} alt={m.alt}/>)}\r\n    </div>\r\n  }\r\n}\r\n\r\nexport default Grid;\r\n","import React, { Component } from \"react\";\r\nimport \"./Header.css\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faInfoCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { faSort } from '@fortawesome/free-solid-svg-icons';\r\n\r\nclass Header extends Component {\r\n    state = {\r\n        expanded: false,\r\n        sort: false\r\n    }\r\n\r\n    changeExpanded = () => this.setState({expanded: !this.state.expanded});\r\n    // changeSort = (type) =>  \r\n\r\n    render() {\r\n        return <div className={this.state.expanded ? 'header expanded' : 'header'}>\r\n            <div className=\"buttons-ctnr\">\r\n                <span className=\"button info\" onClick={this.changeExpanded}>\r\n                    <FontAwesomeIcon className=\"icon\" icon={faInfoCircle} />\r\n                </span>\r\n                {/* <span className=\"button sort\" onClick={this.changeExpanded}>\r\n                    <FontAwesomeIcon className=\"icon\" icon={faSort} />\r\n                </span> */}\r\n            </div>\r\n\r\n            {this.state.expanded && \r\n                <p>This is my collection of stuffed animals I've crocheted/knitted (mostly the former) for friends \r\n                    and coworkers so that they would have a friend to help them through stressful times. \r\n                    The secondary goal was to shrink my yarn collection but I ended up buying more yarn instead!</p>\r\n            }  \r\n        </div>\r\n    }\r\n}\r\n\r\nexport default Header;","import React from \"react\";\nimport \"./App.css\";\nimport Grid from \"./Grid/Grid\";\nimport Header from \"./Header/Header\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header></Header>\n      <Grid></Grid>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}